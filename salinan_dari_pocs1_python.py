# -*- coding: utf-8 -*-
"""Salinan dari PocS1_Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZVqSvxb28ewJnALIzEGO0MLoSpmEU7Za

# **INTRODUCTION TO PYTHON**
---

# Sesi 1 - Objectives

Setelah pertemuan ini, peserta diharapkan:

1. Memahami dasar-dasar Python seperti variabel, tipe data, operator aritmatika, dan perbandingan.
2. Mampu membuat program sederhana yang menggunakan operator aritmatika dan perbandingan.
3. Siap untuk melanjutkan ke konsep logika pemrograman seperti kondisi dan looping pada pertemuan berikutnya.

# 1. Apa itu Python?

Python adalah bahasa skrip tingkat tinggi yang dibuat oleh Guido van Rossum pada akhir 1980-an. Versi pertamanya dirilis pada 1991, dengan versi 3.0 diperkenalkan pada 2008 yang membawa perubahan signifikan namun tidak kompatibel dengan versi sebelumnya. Python dinamai dari grup komedi Monty Python, yang disukai Guido.

Selain itu, Python juga termasuk bahasa pemograman yang populer karena sintaksnya yang sederhana dan mudah dipahami. Python digunakan dalam berbagai bidang, termasuk data science.

# 2. Why `Python` for Data Science?

- Terkenal sebagai bahasa yang mudah dipahami karena sintaksnya yang sederhana.
- Memiliki library dan framework yang dirancang kusus untuk Data Science seperti :
   - Pandas, untuk analisis dan manipulasi data
   - NumPy, untuk komputasi dan operasi matematika
   - Matplotlib, untuk visualisasi data
   - Seaborn, untuk visualisasi data dengan lebih banyak varian
   - Scikit-learn, untuk preprocessing data hingga penggunaan algoritma machine learning
   - Tensorflow, untuk Deep Learning dengan format data gambar, text, atau suara.
- Mudah untuk diintegrasikan dengan bahasa lain serta mendukung deploy model ke aplikasi yang berbeda.

# 3. Instalasi Python dan Anaconda

Untuk windows [click here](https://www.anaconda.com/download)

Untuk mac use [homebrew](https://brew.sh/) (recommended)

### Integrated Development Environment (IDE)

> Sebuah software untuk membantu developer untuk menulis, mengedit, mengelola, dan menjalankan kode program

Contohnnya:
- [VScode](https://code.visualstudio.com/download) -> free
- Google Colab
- Jupyter Notebook
- Pycharm

Selanjutnya kita test apakah sudah berhasil terinstalasi semua? Run code di bawah ini:
"""

print("Hello, World!")

"""# 4. Tipe Data, Variable, & Operators

## Integers

Pada python 3, tidak ada batasan berapa jumlah integer.
"""

print(123456789 + 1)

123+ 1

"""sintaks itu biasanya berwarna dalam program language apapun. Di python biasanya diikuti dengan tanda kurung ()."""

print(1)
print(type(1))

"""## Floating-Point Numbers

Bilangan desimal/kontiniu ditulis dengan titik. Kita bisa menambahkan e juga diikuti dengan bilangan positif atau negatif.

"""

print(2.5)
print(type(2.5))

print(2.5)

print(.2)

print(.2e7)

print(2.5e-25)

a = 4/2

type(a)

a

"""## Strings

String adalah urutan data karakter. Tipe data string dalam Python disebut *str*.

Literal string dapat dibatasi menggunakan tanda kutip satu atau kutip dua. Semua karakter di antara pembatas pembuka dan pembatas penutup yang sesuai merupakan bagian dari string.

Perjanjian:  

` = petik.

'' = kutip 1/ string/ single quote.

"" = kutip 2/ string/ double quotes.

Deal ya :)
"""

print("Scientists ")
print('')
print(type("Scientists"))
type("Scientists")

"""String di python juga bisa memiliki jumlah karakter yang tak terbatas.
---

Selain itu, string juga bisa kosong
"""

print('')

print("This string contains a single quote (') character.")

print('This string contains a double quote (") character.')

# Contoh -> shortcut nya #comment = ctrl + /

print('Ibu bilang ke Budi,"Sana main bola, daripada main gadget terus"')

"""## Boolean Type, Boolean Context, and “Truthiness”


Python 3 juga menyediakan tipe data Boolean yang memiliki 2 value, True atau False:
"""

print(type(True))

print(type(False))

"""# 5. Variables Assignment

Variabel adalah tempat untuk menyimpan data. Di Python, variabel dibuat tanpa deklarasi tipe. Cara membuat variable, kita hanya perlu assign sebuah value menggunakan symbol `=`:
"""

N = 200

# Jika kita meng-assign value baru untuk variable n, maka value nya akan menimpa value yang lama

n = 500
print(n)

n

print(n)

N

"""Python juga bisa meng-assign beberapa variable sekaligus."""

a = b = c = 700
print(a + b + c)

"""Kita juga bisa membuat beberapa variable dan memanggil nya dalam satu perintah `print`:"""

name = "Vincent"
Age = 17
has_laptops = True
print(f'nama saya {name} berumur {Age} menyatakan bahwa {has_laptops} saya memiliki laptop') # cara1 - menggunakan format string
print('nama saya',name,'berumur',Age,'menyatakan bahwa',has_laptops,'saya memiliki laptop') # cara2
# cara3 pakai .format()

"""Ingat, variable tidak bisa dimulai dengan angka dan tidak boleh ada spasi !!


"""

# 7_bukan_Messi = 'iya kan?'

# python itu sulit bukan ? = 'bukan :)'

# print = 123 #-> walopun bisa, jangan ya dek ya. Kenapa karena penamaan print sudah ada di sintaks python

"""Terdapat 3 jenis untuk penulisan variable yang lebih dari 1 kata:

- Camel Case: pythonItuMudah

- Pascal Case: PythonItuMudah

- Snake Case: python_itu_mudah

# 6. Operator Aritmatika dan Perbandingan
"""

# Aritmatika
a = 5
b = 2

print(a + b)
print(a - b)
print(a * b)
print(a / b)
print(a % b)  #modulus / sisa bagi
print(a ** b)
print(a // b) #floordiv -> seperti bagi, namun dibulatkan

a // b

10 % 4 # 10 ada sisa tidak jika dibagi dengan 4? ada kan yaitu 2

# Hasil dari bagi akan selalu bilangan desimal, walopun tidak ada sisa bagi

print(10 / 2)

# Perbandingan

a = 10
b = 20
print(a==b) # sama dengan
print(a != b) # tidak sama dengan
print(a <= b) # lebih kecil sama dengan
print(a >= b) # lebih besar sama dengan
print(a < b) # lebih kecil dari
print(a > b) # lebih besar dari

a = 30
b = 30
print(a == b) # TRUE
print(a <= b) # TRUE
print(a >= b) # TRUE

"""Kita juga dapat melakukan perubahan huruf dengan syntax berikut:"""

# Case Conversion
s = 'tEs lagi'

# Capitalize
print(s.capitalize()) # Tes

# Lower
print(s.lower()) #tes

# Swapcase
print(s.swapcase()) #TeS

# Title
print(s.title()) #Tes

# Uppercase
print(s.upper()) #TES

"""# 7. Python Lists - [Square Bracket]

Lists dalam Python didefinisikan dengan menempatkan urutan objek yang dipisahkan oleh koma di dalam tanda kurung siku ([]), seperti contoh berikut:
"""

a = ['foo', 'bar', 'baz', 'qux', 1, 2.5, True]

print(a)

"""Ini beberapa ciri kas dari sebuah list dalam Python:

- Memiliki urutan.
- Dapat menyimpan lebih dari satu tipe data.
- Dapat diakses melalui index nya.
- Dapat dimodifikasi (mutable).

List itu menyimpan urutan. Berikut ini jika kita running hasilnya akan false. Walopun isi list nya sama, tapi urutan penempatan *values* nya berbeda.
"""

a = ['a', 'b', 'c', 'd']
b = ['b', 'd', 'a', 'c']

print(a == b)
print('c' in a)

"""List dapat menyimpan tipe data yang berbeda"""

a = [21.7, 'football', 3, True]

print(a)

"""Array tidak bisa menyimpan tipe data yang berbeda"""

import numpy as np
b = np.array(a)
print(b)

"""Cara mengakses list adalah dengan memanggil indexnya. Ingat index selalu di mulai dari 0.


"""

a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

"""<img src='https://files.realpython.com/media/t.eb0b38e642c5.png' />"""

print(a[0 : 3+2]) # [start : stop(defaultnya -1) : step(defaultnya 1)]
print(a[1])

"""Bayangkan seperti penggaris, nah kita dapat juga mengakses *value* dari sebuah list dengan melihat nya dari -1.

|foo | bar| baz| qux| quux| corge |foo| bar| baz| qux| quux | corge|
|---|---|---|---|---|---|---|---|---|---|---|---|   
|-6 | -5 |-4 |-3| -2| -1 | 0|  1 | 2| 3|   4| 5 |

Contoh nya sebagai berikut:

<img src='https://files.realpython.com/media/t.c11ea56e8ca2.png' />
"""

print(a[-1])
print(a[-3:-5:-1])

a = ['Octa','Syifa','Lintang']
a[2]

"""Slicing juga bisa diterapkan ke List. Jika `a` adalah sebuah list, hasil dari `a[m:n]` adalah akan me-*returns* value dari index `m` sampai dengan `n - 1` (value dalam index `n `tidak ikut). Mirip dengan syntax `.range(start,stop,end)`."""

a = [11,13,15,16,20]

a[2:6]

"""Kalo huruf, min max nya dari huruf pertama (abjad). Kalo angka min angka terkecil max angka terbesar"""

# len(), min(), max()

print(a)

print(len(a))
print(f'nilai minimalnya: {min(a)}')
print(max(a))

"""Kita dapat memodifikasi single value dari sebuah list dengan cara berikut:"""

a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

print(a)

a[2] = 10
a[-1] = 20

print(a)

# kita bisa gunakan del untuk menghapus suatu value dalam List

del a[3]

print(a)

"""Selain itu, kita juga dapat memodifikasi 1 list sekaligus."""

a = ['foo', 'bar', 'baz', 'qux', 'quux', 'corge']

print(a[1:4])

a[1:4] = [1.1, 2.2, 3.3, 4.4, 5.5]

print(a)

"""# 8. Python Tuples - (Round Bracket)

Tuples mirip dengan Lists, bedanya di penggunaan tanda kurung nya (()) bukan square brackets ([]). Selain itu tuple tidak dapat dimodifikasi. Berikut ini beberapa contoh men-define tuple, *indexing*, dan *slicing*:
"""

binatang = ('ayam', 'bebek', 'cicak', 'domba', 'elang', 'Flamingo')

print(binatang)

print(binatang[0:2])

print(binatang[-1])

binatang[0] = 'burung' # hasilnya akan error karena sifat tuples yang immutable

"""# 9. Python Dictionary - {Kurung Kurawal}

Dictionary dan list memiliki karakteristik berikut:

- Keduanya dapat diubah (*mutable*).
- Keduanya dinamis. Mereka dapat bertambah dan berkurang sesuai kebutuhan.
- Keduanya bisa bersarang. Sebuah list bisa berisi list lain, begitu juga dengan dictionary. Sebuah dictionary juga bisa berisi list, dan sebaliknya.

Dictionary berbeda dari list terutama dalam cara mengakses elemennya:

- Elemen list diakses berdasarkan posisinya dalam list, menggunakan indeks.
- Elemen dictionary diakses melalui kunci (*keys*).

Dictionary dalam Python adalah implementasi struktur data yang lebih umum dikenal sebagai *associative array*. Sebuah dictionary terdiri dari kumpulan pasangan *keys: values*. Setiap pasangan *keys: values* memetakan *keys* ke *values* terkait.

Kita dapat mendefinisikan dictionary dengan menuliskan daftar pasangan kunci-nilai yang dipisahkan oleh koma di dalam kurung kurawal ({}). Tanda titik dua (:) memisahkan setiap kunci dari nilai yang terkait.
"""

person = {}
print(type(person))

person['fname'] = 'Vincent'
person['lname'] = 'Timothy'
person['age'] = 17
person['spouse'] = 'Sela'
person['children'] = ['Elpin', 'Coming', 'Soon']
person['pets'] = {'dog': 'Orla', 'fish': 'Koi'}

person

print(person['fname'])
print(person['lname'])

print(person['children'])
print(person['children'][0:2])

print(person['pets'])
print(person['pets']['dog'])

# Built-in Methods
d = {'a': 10, 'b': 20, 'c': 30}

# items
print(d.items())

# keys
print(d.keys())

# values
print(d.values())

from google.colab import drive
drive.mount('/content/drive')

"""---
$$-- END --$$
___

# Latihan

**1. Tipe Data dan String:**

Buatlah program Python yang:
* Mendefinisikan variabel `nama` dengan nilai nama lengkap Anda.
* Mendefinisikan variabel `umur` dengan nilai umur Anda.
* Menampilkan pesan "Nama saya [nama] dan umur saya [umur] tahun." dengan menggunakan *format string*.
"""

nama : "Taufiq Hidayat"
umur : 24
print(f"Nama saya {nama} dan umur saya {umur} tahun.")

"""
**2. List dan Indexing:**

Diberikan list `angka = [10, 20, 30, 40, 50]`.
* Tampilkan elemen ke-3 dari list tersebut.
* Ubah elemen ke-2 menjadi 25.
* Tambahkan angka 60 ke dalam list.
* Hapus elemen terakhir dari list.

"""

angka = [10, 20, 30, 40, 50]
print("Elemen ke-2:",angka[2])

angka[1]=25
print(angka[1])

angka.append(60)
print(angka)

angka.remove(60)
print(angka)

"""**3. Dictionary dan Akses Nilai:**

Diberikan dictionary `mahasiswa = {'nama': 'Budi', 'nim': '12345', 'jurusan': 'Teknik Informatika'}`.
* Tampilkan nilai dari key 'nama'.
* Tambahkan key 'alamat' dengan nilai 'Jakarta'.
* Ubah nilai dari key 'jurusan' menjadi 'Sistem Informasi'.



"""

mahasiswa = {'nama': 'Budi', 'nim': '12345', 'jurusan': 'Teknik Informatika'}

print("Nama :", mahasiswa['nama'])

mahasiswa['alamat']='Jakarta'
print(mahasiswa)

mahasiswa['jurusan'] = 'Sistem Informasi'
print(mahasiswa)

"""**4. Tuple dan Immutable:**

Diberikan tuple `warna = ('merah', 'hijau', 'biru')`.
* Coba ubah elemen pertama dari tuple menjadi 'kuning'. Jelaskan apa yang terjadi.
* Tampilkan jumlah elemen dalam tuple.
* Buatlah list baru yang berisi elemen-elemen dari tuple `warna`.


"""

warna = ('merah', 'hijau', 'biru')



print("Jumlah elemen dalam tuple:", len(warna))

list_warna = list(warna)
print("List baru dari tuple warna:", list_warna)





